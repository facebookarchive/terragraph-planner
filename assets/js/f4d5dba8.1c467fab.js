"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[319],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(n),f=r,m=d["".concat(p,".").concat(f)]||d[f]||c[f]||i;return n?a.createElement(m,l(l({ref:t},u),{},{components:n})):a.createElement(m,l({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4794:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={},p="Quick Start",s={unversionedId:"runbook/Quick_Start",id:"runbook/Quick_Start",title:"Quick Start",description:"The Terragraph Planner is an open-source Python library developed for operators",source:"@site/../docs/runbook/Quick_Start.md",sourceDirName:"runbook",slug:"/runbook/Quick_Start",permalink:"/terragraph-planner/runbook/Quick_Start",draft:!1,editUrl:"https://github.com/terragraph/terragraph-planner/edit/main/docs/../docs/runbook/Quick_Start.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Terragraph Planner Runbook",permalink:"/terragraph-planner/runbook/"},next:{title:"Input Files",permalink:"/terragraph-planner/runbook/Input_Files"}},u={},c=[{value:"Download",id:"download",level:2},{value:"Install",id:"install",level:2},{value:"Set up FICO Xpress",id:"set-up-fico-xpress",level:2},{value:"Run Tests",id:"run-tests",level:2},{value:"Run a Plan",id:"run-a-plan",level:2},{value:"Configuration File",id:"configuration-file",level:3},{value:"Line-of-Sight Analysis Plan",id:"line-of-sight-analysis-plan",level:3},{value:"Optimization Plan and End-to-End Plan",id:"optimization-plan-and-end-to-end-plan",level:3}],d={toc:c};function f(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"quick-start"},"Quick Start"),(0,i.kt)("p",null,"The Terragraph Planner is an open-source Python library developed for operators\nto plan and optimize a mesh network using Terragraph's 60 GHz mmWave technology."),(0,i.kt)("h2",{id:"download"},"Download"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"git clone git@github.com:terragraph/terragraph-planner.git\n")),(0,i.kt)("p",null,"or"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/terragraph/terragraph-planner.git\n")),(0,i.kt)("h2",{id:"install"},"Install"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Update the source, install pip3 and gdal lib. Use apt if you are using\nUbuntu. Use another package tool instead if you are using different OS.",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"apt update && \\\napt install -y software-properties-common && \\\napt install -y python3-pip && \\\napt install -y gdal-bin && \\\napt install -y libgdal-dev && \\\n"))),(0,i.kt)("li",{parentName:"ol"},"Set up environment varibles for gdal lib.",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"export CPLUS_INCLUDE_PATH=/usr/include/gdal && \\\nexport C_INCLUDE_PATH=/usr/include/gdal\n"))),(0,i.kt)("li",{parentName:"ol"},"Change the directory to your local repository."),(0,i.kt)("li",{parentName:"ol"},"Install the terragraph_planner package.",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"pip3 install .\n"))),(0,i.kt)("li",{parentName:"ol"},"Install the extra recommended Python packages if you are a developer.",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"pip3 install -r requirements_dev.txt\n")))),(0,i.kt)("h2",{id:"set-up-fico-xpress"},"Set up FICO Xpress"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Go through steps in ",(0,i.kt)("a",{parentName:"li",href:"#install"},"Install")," to install xpress"),(0,i.kt)("li",{parentName:"ol"},"Set the environment variable ",(0,i.kt)("inlineCode",{parentName:"li"},"XPAUTH_PATH")," to the full path of your commericial\nlicense if you have one. Otherwise, the community license is used by default\n(which will only work for very small plans)."),(0,i.kt)("li",{parentName:"ol"},"If you are using a commercial license for xpress, please specify the\nversion of xpress and install it separately after step 4 in the last section.",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"pip3 install xpress==x.y.z\n")),"where x.y.z is the version compatible with your license.")),(0,i.kt)("p",null,"Get more details at ",(0,i.kt)("a",{parentName:"p",href:"https://www.fico.com/fico-xpress-optimization/docs/latest/solver/optimizer/python/HTML/chIntro.html?scroll=secInstall"},"FICO Xpress Optimization Help"),"."),(0,i.kt)("h2",{id:"run-tests"},"Run Tests"),(0,i.kt)("p",null,"Run the tests to check if the package is correctly installed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"python3 -m unittest discover terragraph_planner -b\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Using different versions of 3rd party dependencies from the ones specified\nin the requirements file can lead to test failure; this does ",(0,i.kt)("strong",{parentName:"p"},"NOT")," mean the\noptimized plan quality is degraded.")),(0,i.kt)("h2",{id:"run-a-plan"},"Run a Plan"),(0,i.kt)("h3",{id:"configuration-file"},"Configuration File"),(0,i.kt)("p",null,"One way to customize and run a plan is using an input configuration yaml file. Refer to\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/terragraph/terragraph-planner/blob/main/terragraph_planner/data/template.yaml"},"template.yaml"),"\nfor available parameters. In general, any parameter not provided in the input\nconfiguration file will use the default value instead. With the exception of\nthe file paths and list of devices, default values can be found in that\nyaml file."),(0,i.kt)("h3",{id:"line-of-sight-analysis-plan"},"Line-of-Sight Analysis Plan"),(0,i.kt)("p",null,"A Line-of-Sight Analysis Plan only runs LOS checks and produces a candidate\nnetwork without optimization."),(0,i.kt)("p",null,"To run an LOS Analysis Plan with a configuration file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from terragraph_plannner import generate_candidate_topology_with_config_file\n\ngenerate_candidate_topology_with_config_file(config_file_path)\n")),(0,i.kt)("h3",{id:"optimization-plan-and-end-to-end-plan"},"Optimization Plan and End-to-End Plan"),(0,i.kt)("p",null,"An Optimization Plan optimizes the input candidate network. An End-to-End Plan\nruns both the LOS analysis and the network optimization."),(0,i.kt)("p",null,"To run an Optimization Plan or End-to-End Plan with a configuration file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"from terragraph_plannner import optimize_and_report_topology_with_config_file\n\noptimize_and_report_topology_with_config_file(config_file_path)\n")),(0,i.kt)("p",null,"The configuration file will control which plan type is run. If the candidate\ntopology file is provided, only the Optimization Plan will be run. If the\ncandidate topology file is not provided, the End-to-End Plan will run."))}f.isMDXComponent=!0}}]);